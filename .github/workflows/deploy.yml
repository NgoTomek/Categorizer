name: Deploy Question Paper Generator

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  terraform:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: ./infra/terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Format
        run: terraform fmt -check
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: terraform plan -var="environment=${{ github.event.inputs.environment || 'dev' }}" -no-color
        continue-on-error: true
      
      - name: Terraform Apply
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: terraform apply -var="environment=${{ github.event.inputs.environment || 'dev' }}" -auto-approve
      
      - name: Extract Terraform Outputs
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        id: terraform_outputs
        run: |
          echo "::set-output name=lambda_function_name::$(terraform output -raw lambda_function_name)"
          echo "::set-output name=api_gateway_url::$(terraform output -raw api_gateway_url)"
          echo "::set-output name=user_pool_id::$(terraform output -raw user_pool_id)"
          echo "::set-output name=user_pool_client_id::$(terraform output -raw user_pool_client_id)"
          echo "::set-output name=generated_bucket_id::$(terraform output -raw generated_bucket_id)"
      
      - name: Notify Slack on Success
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Terraform Apply Success
          SLACK_MESSAGE: "Successfully applied Terraform infrastructure for ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"
      
      - name: Notify Slack on Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Terraform Apply Failed
          SLACK_MESSAGE: "Failed to apply Terraform infrastructure for ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"

  backend:
    name: 'Deploy Backend'
    needs: terraform
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run Tests
        working-directory: ./backend
        run: |
          pytest --cov=. --cov-report=xml
      
      - name: Package Lambda Function
        working-directory: ./backend
        run: |
          pip install -r requirements.txt -t ./package
          cp *.py ./package/
          cd package
          zip -r ../lambda_function.zip .
      
      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{ needs.terraform.outputs.lambda_function_name }} \
            --zip-file fileb://backend/lambda_function.zip
      
      - name: Notify Slack on Success
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Backend Deploy Success
          SLACK_MESSAGE: "Successfully deployed backend for ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"
      
      - name: Notify Slack on Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Backend Deploy Failed
          SLACK_MESSAGE: "Failed to deploy backend for ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"

  frontend:
    name: 'Deploy Frontend'
    needs: [terraform, backend]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Create .env file
        working-directory: ./frontend
        run: |
          cat > .env << EOF
          REACT_APP_API_ENDPOINT=${{ needs.terraform.outputs.api_gateway_url }}
          REACT_APP_USER_POOL_ID=${{ needs.terraform.outputs.user_pool_id }}
          REACT_APP_USER_POOL_CLIENT_ID=${{ needs.terraform.outputs.user_pool_client_id }}
          REACT_APP_AWS_REGION=${{ secrets.AWS_REGION }}
          EOF
      
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Run Tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false
      
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/build/ s3://${{ needs.terraform.outputs.generated_bucket_id }}-web/ --delete
      
      - name: Invalidate CloudFront
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          CLOUDFRONT_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ needs.terraform.outputs.generated_bucket_id }}-web.s3.amazonaws.com']].Id" --output text)
          if [ -n "$CLOUDFRONT_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
          fi
      
      - name: Notify Slack on Success
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Frontend Deploy Success
          SLACK_MESSAGE: "Successfully deployed frontend for ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"
      
      - name: Notify Slack on Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Frontend Deploy Failed
          SLACK_MESSAGE: "Failed to deploy frontend for ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"

  notify:
    name: 'Notify Deployment Complete'
    needs: [terraform, backend, frontend]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Notify Slack on Complete Deployment
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Deployment Complete
          SLACK_MESSAGE: "Successfully deployed the entire Question Paper Generator application to ${{ github.event.inputs.environment || 'dev' }} environment"
          SLACK_FOOTER: "Question Paper Generator Project"
